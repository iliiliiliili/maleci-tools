from typing import List
import astroid
import os
from pathlib import Path

from maleci.exceptions import CancelException, NotFolderException, WrongVersionException, NoSelectionException, VerificationCancelledException
from maleci.linux.cuda import CUDA_PREFIX, find_cuda_versions
from maleci.core import (
    resolve_path,
    write_lines,
    backup_file,
    select_option,
)

EXPECTED_ARGS = {
    "linux add lmod cuda": [
        ("versions", "v"),
        (
            "path",
            "output",
            "project",
            "output_path",
            "output_folder",
            "out",
            "out_path",
            "out_folder",
            "target",
            "test",
            "tests",
        ),
        ("cuda_path", "cuda"),
        ("temp", "tmp"),
        ("overwrite_files", "rewrite_files", "overwrite", "rewrite"),
        ("sudo"),
    ],
    "linux install lmod": [
        ("version", "v"),
        ("lua_version", "lv", "lua"),
        ("luarocks_version", "lrv"),
        (
            "install_path",
            "path",
            "project",
        ),
        ("modulfiles_path", "modulfiles", "module_path"),
        ("temp", "tmp"),
        ("sudo"),
    ],
}

DEFAULT_VALUES = {
    "linux add lmod cuda": {
        "versions": None,
        "path": "/opt/uw/modulefiles",
        "cuda_path": "/usr/local",
        "temp": "~/install/maleci-lmod",
        "sudo": "ask",
        "overwrite_files": False,
    },
    "linux install lmod": {
        "version": "8.4.2",
        "lua_version": "5.4.0",
        "luarocks_version": "3.3.1",
        "install_path": "/opt/lmod/stable",
        "modulfiles_path": "/opt/uw/modulefiles",
        "temp": "~/install/maleci-lmod",
        "sudo": "ask",
    },
}

ALLOWED_VERSIONS = {
    "lmod": ["8.4.2"],
    "lua": ["5.4.0"],
    "luarocks": ["3.3.1"],
}


def verify_and_fix_args_add(args):

    if not os.path.isdir(args["path"]):
        raise NotFolderException()

    if not os.path.isdir(args["cuda_path"]):
        raise NotFolderException()

    return args


def verify_and_fix_args_install(args):

    if args["version"] not in ALLOWED_VERSIONS["lmod"]:
        raise WrongVersionException()

    if args["lua_version"] not in ALLOWED_VERSIONS["lua"]:
        raise WrongVersionException()

    if args["luarocks_version"] not in ALLOWED_VERSIONS["luarocks"]:
        raise WrongVersionException()

    return args


def create_cuda_modulefile(version, cuda_path, file_path):

    lines = [
        "help([[",
        "Cuda modulefile generated by maleci tools",
        "maleci linux add lmod cuda",
        "]])",
        f'whatis("Sets the environment for NVIDIA Cuda version {version}")',
        "",
        f'local topdir = "{cuda_path}/{CUDA_PREFIX}{version}"',
        "",
        'prepend_path("PATH", pathJoin(topdir, "bin"))',
        'prepend_path("MANPATH", pathJoin(topdir, "doc/man"))',
        'prepend_path("LD_LIBRARY_PATH", pathJoin(topdir, "lib64"))',
        'prepend_path("LIBRARY_PATH", pathJoin(topdir, "lib64"))',
    ]

    write_lines(lines, file_path)


def create_lmod_install_script(version, lua_version, luarocks_version, install_path, modulfiles_path, file_path):

    lines = [
        "#!/bin/bash",
        "## run from root",
        "",
        f"VER={version}",
        "ITERATION=0",
        f"INSTALL_PATH={install_path}",
        f"MODULEFILES_PATH={modulfiles_path}",
        "",
        "apt update",
        "apt install -y git wget sed tclsh tcl-dev libreadline-dev",
        "",
        "#** ensure packages",
        f"test -f lua-{lua_version}.tar.gz || wget http://www.lua.org/ftp/lua-{lua_version}.tar.gz",
        f"tar zxf lua-{lua_version}.tar.gz -C ~",
        f"test -f luarocks-{luarocks_version}.tar.gz || wget https://luarocks.org/releases/luarocks-{luarocks_version}.tar.gz",
        f"tar zxpf luarocks-{luarocks_version}.tar.gz -C ~",
        "",
        "#** build lua",
        f"cd ~/lua-{lua_version}",
        'sed -i "s|/usr/local|$INSTALL_PATH/lua|" ./Makefile',
        'sed -i "s|/usr/local/|$INSTALL_PATH/lua/|" ./src/luaconf.h',
        "make linux",
        "make install",
        "",
        "#** build luarocks",
        f"cd ~/luarocks-{luarocks_version}",
        "./configure --prefix=$INSTALL_PATH/lua/  --with-lua=$INSTALL_PATH/lua",
        "make install",
        "",
        "#** build lmod lua requirements",
        "$INSTALL_PATH/lua/bin/luarocks install luaposix",
        "$INSTALL_PATH/lua/bin/luarocks install luajson",
        "$INSTALL_PATH/lua/bin/luarocks install luafilesystem",
        "",
        "#** build lmod",
        "cd ~",
        "git clone https://github.com/TACC/Lmod.git",
        "cd ~/Lmod",
        "git checkout $VER",
        "export PATH=$INSTALL_PATH/lua/bin:$PATH",
        "",
        "./configure --prefix=$INSTALL_PATH --with-siteControlPrefix=yes --with-useBuiltinPkgs=yes",
        "make install",
        "",
        'mkdir -p "$MODULEFILES_PATH"',
        "cat > $INSTALL_PATH/init/.modulespath <<EOF",
        "$MODULEFILES_PATH",
        "EOF",
        "ln -s $INSTALL_PATH/init/profile /etc/profile.d/lmod.sh",
        "ln -s $INSTALL_PATH/init/cshrc   /etc/profile.d/lmod.csh",
    ]

    write_lines(lines, file_path)


def add_cuda_modulefiles(
    versions, path, cuda_path, temp, sudo, overwrite_files, backup=True
):

    temp_path = resolve_path(temp)

    if versions is None:
        versions = find_cuda_versions(cuda_path)
        if len(versions) <= 0:
            raise ValueError(f"No cuda versions found in `{cuda_path}`")
    elif not (
        isinstance(versions, list)
        or isinstance(versions, tuple)
        or isinstance(versions, str)
    ):
        raise ValueError(f"Cannot understand versions:`{versions}`")

    if len(versions) <= 0:
        raise ValueError(f"No cuda versions provided")

    action_script_path = temp_path / "cuda" / "move-modulefiles.sh"

    if sudo == "ask":
        try:
            sudo = (
                select_option(
                    [
                        f"Use sudo to move modulefiles to {path}",
                        f"Do not use sudo, create a script ({action_script_path}) to be used by a sudo-user to move modulefiles to {path}",
                    ],
                    "Use sudo?",
                )
                == 0
            )
        except NoSelectionException:
            raise VerificationCancelledException()
    else:
        sudo = isinstance(sudo, bool) and sudo == True

    action_script_lines = [
        "#!/bin/bash",
        "",
    ]

    os.makedirs(temp_path / "cuda", exist_ok=True)

    make_output_dir_action = f"mkdir -p {Path(path) / 'cuda'}"

    if sudo:
        os.system(f"sudo {make_output_dir_action}")
    else:
        action_script_lines.append(make_output_dir_action)

    created = False

    for version in versions:

        local_file = temp_path / "cuda" / f"{version}.lua"
        output_file = Path(path) / "cuda" / f"{version}.lua"

        if os.path.exists(output_file):
            if overwrite_files:
                if backup:
                    backup_file(output_file, "linux add lmod cuda")
            else:
                print(f"Modulefile for {CUDA_PREFIX}{version} already exists in {path}")
                continue

        create_cuda_modulefile(version, cuda_path, local_file)
        print(f"Created modulefile for {CUDA_PREFIX}{version}")
        created = True

        action = f"cp {local_file} {output_file}"

        if sudo:
            os.system(f"sudo {action}")
        else:
            action_script_lines.append(action)

    if not sudo and created:
        write_lines(action_script_lines, action_script_path)
        print(f"Created script to move modulefiles with sudo at {action_script_path}")


def install_lmod(version, lua_version, luarocks_version, install_path, modulfiles_path, temp, sudo):

    temp_path = resolve_path(temp)

    action_script_path = temp_path / "install-lmod.sh"

    if sudo == "ask":
        try:
            sudo = (
                select_option(
                    [
                        f"Use sudo to install lmod",
                        f"Do not use sudo, create a script ({action_script_path}) to be used by a sudo-user to install lmod",
                    ],
                    "Use sudo?",
                )
                == 0
            )
        except NoSelectionException:
            raise VerificationCancelledException()
    else:
        sudo = isinstance(sudo, bool) and sudo == True

    os.makedirs(temp_path, exist_ok=True)

    create_lmod_install_script(version, lua_version, luarocks_version, install_path, modulfiles_path, action_script_path)

    install_lmod_action = f"bash {action_script_path}"

    if sudo:
        os.system(f"sudo {install_lmod_action}")
        print("Installation complete")
    else:
        print(f"Script is created at {action_script_path}. Run it with sudo to perform the installation")
