from typing import List
import astroid
import os
from pathlib import Path

from maleci.exceptions import CancelException, NotFolderException
from maleci.core import (
    find_files_in_folder,
    indent_single,
    resolve_path,
    path_in_project,
    select_continue_with_details,
    display_files,
    get_relative_path,
    insert_lines_with_indendtation,
    to_camel_case,
    to_snake_case,
    write_lines,
    backup_file,
    select_option
)

EXPECTED_ARGS = {
    "linux add lmod cuda": [
        ("versions", "v"),
        (
            "path",
            "output",
            "project",
            "output_path",
            "output_folder",
            "out",
            "out_path",
            "out_folder",
            "target",
            "test",
            "tests",
        ),
        ("cuda_path", "cuda"),
        ("temp", "tmp"),
        ("overwrite_files", "rewrite_files", "overwrite", "rewrite"),
        ("sudo"),
    ]
}

DEFAULT_VALUES = {
    "linux add lmod cuda": {
        "versions": None,
        "path": "/opt/uw/modulefiles",
        "cuda_path": "/usr/local",
        "temp": "~/install/maleci-lmod",
        "sudo": "ask",
        "overwrite_files": False,
    }
}


CUDA_PREFIX = "cuda-"


def verify_and_fix_args_add(args):

    if not os.path.isdir(args["path"]):
        raise NotFolderException()

    if not os.path.isdir(args["path"]):
        raise NotFolderException()

    return args


def find_cuda_versions(cuda_path):
    cuda_dirs = [a for a in os.listdir(cuda_path) if CUDA_PREFIX in a]
    cuda_versions = [a.replace(CUDA_PREFIX, "") for a in cuda_dirs]

    return cuda_versions


def create_cuda_modulefile(version, cuda_path, file_path):

    lines = [
        'help([[',
        'Cuda modulefile generated by maleci tools',
        'maleci linux add lmod cuda',
        ']])',
        f'whatis("Sets the environment for NVIDIA Cuda version {version}")',
        '',
        f'local topdir = "{cuda_path}/{CUDA_PREFIX}{version}"',
        '',
        'prepend_path("PATH", pathJoin(topdir, "bin"))',
        'prepend_path("MANPATH", pathJoin(topdir, "doc/man"))',
        'prepend_path("LD_LIBRARY_PATH", pathJoin(topdir, "lib64"))',
        'prepend_path("LIBRARY_PATH", pathJoin(topdir, "lib64"))',
    ]

    write_lines(lines, file_path)


def add_cuda_modulefiles(
    versions, path, cuda_path, temp, sudo, overwrite_files, backup=True
):

    temp_path = resolve_path(temp)

    if versions is None:
        versions = find_cuda_versions(cuda_path)
        if len(versions) <= 0:
            raise ValueError(f"No cuda versions found in `{cuda_path}`")
    elif not (isinstance(versions, list) or isinstance(versions, tuple) or isinstance(versions, str)):
        raise ValueError(f"Cannot understand versions:`{versions}`")

    if len(versions) <= 0:
        raise ValueError(f"No cuda versions provided")
    
    action_script_path = temp_path / "cuda" / "move-modulefiles.sh"

    if sudo == "ask":
        sudo = select_option([
            f"Use sudo to move modulefiles to {path}",
            f"Do not use sudo, create a script ({action_script_path}) to be used by a sudo-user to move modulefiles to {path}",
        ], "Use sudo?") == 0
    else:
        sudo = isinstance(sudo, bool) and sudo == True

    action_script_lines = [
        "#!/bin/bash",
        "",
    ]

    os.makedirs(temp_path / "cuda", exist_ok=True)

    make_output_dir_action = f"mkdir -p {Path(path) / 'cuda'}"

    if sudo:
        os.system(f"sudo {make_output_dir_action}")
    else:
        action_script_lines.append(make_output_dir_action)

    created = False
        
    for version in versions:

        local_file = temp_path / "cuda" / f"{version}.lua"
        output_file = Path(path) / "cuda" / f"{version}.lua"

        if os.path.exists(output_file):
            if overwrite_files:
                if backup:
                    backup_file(output_file, "linux add lmod cuda")
            else:
                print(f"Modulefile for {CUDA_PREFIX}{version} already exists in {path}")
                continue
        
        create_cuda_modulefile(version, cuda_path, local_file)
        print(f"Created modulefile for {CUDA_PREFIX}{version}")
        created = True

        action = f"cp {local_file} {output_file}"

        if sudo:
            os.system(f"sudo {action}")
        else:
            action_script_lines.append(action)
    
    if not sudo and created:
        write_lines(action_script_lines, action_script_path)
        print(f"Created script to move modulefiles with sudo at {action_script_path}")

        
            